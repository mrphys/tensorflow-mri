# Copyright 2022 The TensorFlow MRI Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================
"""Coil sensitivity estimation."""

import numpy as np
import tensorflow as tf

from tensorflow_mri.python.coils import coil_sensitivities
from tensorflow_mri.python.linalg import linear_operator_mri
from tensorflow_mri.python.ops import fft_ops
from tensorflow_mri.python.ops import image_ops
from tensorflow_mri.python.ops import traj_ops
from tensorflow_mri.python.util import test_util

import matplotlib.pyplot as plt
from tensorflow_mri.python.util import plot_util


class CoilSensitivitiesTest(test_util.TestCase):

  def test_coil_sensitivities(self):
    # Simulate k-space.
    image_shape = (8, 8)
    image = image_ops.phantom(shape=image_shape, num_coils=4,
                              dtype=tf.complex64)
    kspace = fft_ops.fftn(image, axes=(-2, -1), shift=True)

    # Create a mask.
    mask = traj_ops.random_sampling_mask(
        shape=image_shape,
        density=traj_ops.density_grid(image_shape,
                                      outer_density=0.2,
                                      inner_cutoff=0.1,
                                      outer_cutoff=0.1))

    operator = linear_operator_mri.LinearOperatorMRI(
        image_shape=image_shape, mask=mask)

    sens = coil_sensitivities.coil_sensitivities(kspace,
                                                 operator,
                                                 calib_region=0.1 * np.pi)

    expected = [
       [[0.43218857-4.6583355e-09j, 0.43218845-8.7869850e-11j,
         0.43218854-6.1883219e-09j, 0.43218854-6.1883219e-09j,
         0.43218854-6.1883219e-09j, 0.43218854-6.1883219e-09j,
         0.43218845-8.7869850e-11j, 0.43218857-4.6583355e-09j],
        [0.43218845-8.7869850e-11j, 0.4321886 -3.5613092e-09j,
         0.4321885 +1.2543831e-08j, 0.4321885 +1.2543831e-08j,
         0.4321885 +1.2543831e-08j, 0.4321885 +1.2543831e-08j,
         0.4321886 -3.5613092e-09j, 0.43218845-8.7869850e-11j],
        [0.43218854-6.1883219e-09j, 0.4321885 +1.2543831e-08j,
         0.4321885 -4.5338737e-09j, 0.4321885 -4.5338737e-09j,
         0.4321885 -4.5338737e-09j, 0.4321885 -4.5338737e-09j,
         0.4321885 +1.2543831e-08j, 0.43218854-6.1883219e-09j],
        [0.43218854-6.1883219e-09j, 0.4321885 +1.2543831e-08j,
         0.4321885 -4.5338737e-09j, 0.4321885 -4.5338737e-09j,
         0.4321885 -4.5338737e-09j, 0.4321885 -4.5338737e-09j,
         0.4321885 +1.2543831e-08j, 0.43218854-6.1883219e-09j],
        [0.43218854-6.1883219e-09j, 0.4321885 +1.2543831e-08j,
         0.4321885 -4.5338737e-09j, 0.4321885 -4.5338737e-09j,
         0.4321885 -4.5338737e-09j, 0.4321885 -4.5338737e-09j,
         0.4321885 +1.2543831e-08j, 0.43218854-6.1883219e-09j],
        [0.43218854-6.1883219e-09j, 0.4321885 +1.2543831e-08j,
         0.4321885 -4.5338737e-09j, 0.4321885 -4.5338737e-09j,
         0.4321885 -4.5338737e-09j, 0.4321885 -4.5338737e-09j,
         0.4321885 +1.2543831e-08j, 0.43218854-6.1883219e-09j],
        [0.43218845-8.7869850e-11j, 0.4321886 -3.5613092e-09j,
         0.4321885 +1.2543831e-08j, 0.4321885 +1.2543831e-08j,
         0.4321885 +1.2543831e-08j, 0.4321885 +1.2543831e-08j,
         0.4321886 -3.5613092e-09j, 0.43218845-8.7869850e-11j],
        [0.43218857-4.6583355e-09j, 0.43218845-8.7869850e-11j,
         0.43218854-6.1883219e-09j, 0.43218854-6.1883219e-09j,
         0.43218854-6.1883219e-09j, 0.43218854-6.1883219e-09j,
         0.43218845-8.7869850e-11j, 0.43218857-4.6583355e-09j]],
       [[0.482938  -6.7950569e-02j, 0.48293796-6.7950562e-02j,
         0.48293793-6.7950577e-02j, 0.48293793-6.7950577e-02j,
         0.48293793-6.7950577e-02j, 0.48293793-6.7950577e-02j,
         0.48293796-6.7950562e-02j, 0.482938  -6.7950569e-02j],
        [0.48293796-6.7950562e-02j, 0.4829379 -6.7950562e-02j,
         0.4829379 -6.7950569e-02j, 0.4829379 -6.7950569e-02j,
         0.4829379 -6.7950569e-02j, 0.4829379 -6.7950569e-02j,
         0.4829379 -6.7950562e-02j, 0.48293796-6.7950562e-02j],
        [0.48293793-6.7950577e-02j, 0.4829379 -6.7950569e-02j,
         0.48293784-6.7950577e-02j, 0.48293784-6.7950577e-02j,
         0.48293784-6.7950577e-02j, 0.48293784-6.7950577e-02j,
         0.4829379 -6.7950569e-02j, 0.48293793-6.7950577e-02j],
        [0.48293793-6.7950577e-02j, 0.4829379 -6.7950569e-02j,
         0.48293784-6.7950577e-02j, 0.48293784-6.7950577e-02j,
         0.48293784-6.7950577e-02j, 0.48293784-6.7950577e-02j,
         0.4829379 -6.7950569e-02j, 0.48293793-6.7950577e-02j],
        [0.48293793-6.7950577e-02j, 0.4829379 -6.7950569e-02j,
         0.48293784-6.7950577e-02j, 0.48293784-6.7950577e-02j,
         0.48293784-6.7950577e-02j, 0.48293784-6.7950577e-02j,
         0.4829379 -6.7950569e-02j, 0.48293793-6.7950577e-02j],
        [0.48293793-6.7950577e-02j, 0.4829379 -6.7950569e-02j,
         0.48293784-6.7950577e-02j, 0.48293784-6.7950577e-02j,
         0.48293784-6.7950577e-02j, 0.48293784-6.7950577e-02j,
         0.4829379 -6.7950569e-02j, 0.48293793-6.7950577e-02j],
        [0.48293796-6.7950562e-02j, 0.4829379 -6.7950562e-02j,
         0.4829379 -6.7950569e-02j, 0.4829379 -6.7950569e-02j,
         0.4829379 -6.7950569e-02j, 0.4829379 -6.7950569e-02j,
         0.4829379 -6.7950562e-02j, 0.48293796-6.7950562e-02j],
        [0.482938  -6.7950569e-02j, 0.48293796-6.7950562e-02j,
         0.48293793-6.7950577e-02j, 0.48293793-6.7950577e-02j,
         0.48293793-6.7950577e-02j, 0.48293793-6.7950577e-02j,
         0.48293796-6.7950562e-02j, 0.482938  -6.7950569e-02j]],
       [[0.48752287-6.2960379e-02j, 0.4875229 -6.2960386e-02j,
         0.48752284-6.2960386e-02j, 0.48752284-6.2960386e-02j,
         0.48752284-6.2960386e-02j, 0.48752284-6.2960386e-02j,
         0.4875229 -6.2960386e-02j, 0.48752287-6.2960379e-02j],
        [0.4875229 -6.2960386e-02j, 0.4875229 -6.2960394e-02j,
         0.48752287-6.2960371e-02j, 0.48752287-6.2960371e-02j,
         0.48752287-6.2960371e-02j, 0.48752287-6.2960371e-02j,
         0.4875229 -6.2960394e-02j, 0.4875229 -6.2960386e-02j],
        [0.48752284-6.2960386e-02j, 0.48752287-6.2960371e-02j,
         0.48752296-6.2960409e-02j, 0.48752296-6.2960409e-02j,
         0.48752296-6.2960409e-02j, 0.48752296-6.2960409e-02j,
         0.48752287-6.2960371e-02j, 0.48752284-6.2960386e-02j],
        [0.48752284-6.2960386e-02j, 0.48752287-6.2960371e-02j,
         0.48752296-6.2960409e-02j, 0.48752296-6.2960409e-02j,
         0.48752296-6.2960409e-02j, 0.48752296-6.2960409e-02j,
         0.48752287-6.2960371e-02j, 0.48752284-6.2960386e-02j],
        [0.48752284-6.2960386e-02j, 0.48752287-6.2960371e-02j,
         0.48752296-6.2960409e-02j, 0.48752296-6.2960409e-02j,
         0.48752296-6.2960409e-02j, 0.48752296-6.2960409e-02j,
         0.48752287-6.2960371e-02j, 0.48752284-6.2960386e-02j],
        [0.48752284-6.2960386e-02j, 0.48752287-6.2960371e-02j,
         0.48752296-6.2960409e-02j, 0.48752296-6.2960409e-02j,
         0.48752296-6.2960409e-02j, 0.48752296-6.2960409e-02j,
         0.48752287-6.2960371e-02j, 0.48752284-6.2960386e-02j],
        [0.4875229 -6.2960386e-02j, 0.4875229 -6.2960394e-02j,
         0.48752287-6.2960371e-02j, 0.48752287-6.2960371e-02j,
         0.48752287-6.2960371e-02j, 0.48752287-6.2960371e-02j,
         0.4875229 -6.2960394e-02j, 0.4875229 -6.2960386e-02j],
        [0.48752287-6.2960379e-02j, 0.4875229 -6.2960386e-02j,
         0.48752284-6.2960386e-02j, 0.48752284-6.2960386e-02j,
         0.48752284-6.2960386e-02j, 0.48752284-6.2960386e-02j,
         0.4875229 -6.2960386e-02j, 0.48752287-6.2960379e-02j]],
       [[0.57736677+1.9284124e-02j, 0.57736677+1.9284116e-02j,
         0.5773667 +1.9284122e-02j, 0.5773667 +1.9284122e-02j,
         0.5773667 +1.9284122e-02j, 0.5773667 +1.9284122e-02j,
         0.57736677+1.9284116e-02j, 0.57736677+1.9284124e-02j],
        [0.57736677+1.9284116e-02j, 0.57736677+1.9284124e-02j,
         0.57736677+1.9284150e-02j, 0.57736677+1.9284150e-02j,
         0.57736677+1.9284150e-02j, 0.57736677+1.9284150e-02j,
         0.57736677+1.9284124e-02j, 0.57736677+1.9284116e-02j],
        [0.5773667 +1.9284122e-02j, 0.57736677+1.9284150e-02j,
         0.5773668 +1.9284131e-02j, 0.5773668 +1.9284131e-02j,
         0.5773668 +1.9284131e-02j, 0.5773668 +1.9284131e-02j,
         0.57736677+1.9284150e-02j, 0.5773667 +1.9284122e-02j],
        [0.5773667 +1.9284122e-02j, 0.57736677+1.9284150e-02j,
         0.5773668 +1.9284131e-02j, 0.5773668 +1.9284131e-02j,
         0.5773668 +1.9284131e-02j, 0.5773668 +1.9284131e-02j,
         0.57736677+1.9284150e-02j, 0.5773667 +1.9284122e-02j],
        [0.5773667 +1.9284122e-02j, 0.57736677+1.9284150e-02j,
         0.5773668 +1.9284131e-02j, 0.5773668 +1.9284131e-02j,
         0.5773668 +1.9284131e-02j, 0.5773668 +1.9284131e-02j,
         0.57736677+1.9284150e-02j, 0.5773667 +1.9284122e-02j],
        [0.5773667 +1.9284122e-02j, 0.57736677+1.9284150e-02j,
         0.5773668 +1.9284131e-02j, 0.5773668 +1.9284131e-02j,
         0.5773668 +1.9284131e-02j, 0.5773668 +1.9284131e-02j,
         0.57736677+1.9284150e-02j, 0.5773667 +1.9284122e-02j],
        [0.57736677+1.9284116e-02j, 0.57736677+1.9284124e-02j,
         0.57736677+1.9284150e-02j, 0.57736677+1.9284150e-02j,
         0.57736677+1.9284150e-02j, 0.57736677+1.9284150e-02j,
         0.57736677+1.9284124e-02j, 0.57736677+1.9284116e-02j],
        [0.57736677+1.9284124e-02j, 0.57736677+1.9284116e-02j,
         0.5773667 +1.9284122e-02j, 0.5773667 +1.9284122e-02j,
         0.5773667 +1.9284122e-02j, 0.5773667 +1.9284122e-02j,
         0.57736677+1.9284116e-02j, 0.57736677+1.9284124e-02j]]]

    self.assertAllClose(expected, sens)
